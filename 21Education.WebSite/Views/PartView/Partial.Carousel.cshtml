@using System.Text.RegularExpressions
@model CarouselViewModel


<style>
    .carousel.@Model.ClassName {
        --ContainerWidth:@Model.ContainerWidth;
        --ImgWidth: @Model.ImgWidth;
        --ImgMargin:@Model.ImgMargin;
        --ImgReal:@(Model.ImgWidth+Model.ImgMargin);
        --ShowCount: @Model.ShowCount;
        @(Model.ImgHeight!=0? "--ImgHeight: "+ Model.ImgHeight : "")
    }
    @(Model.ImgMargin!=0? ".carousel." + Model.ClassName + " .container .slider-container .slider-item { margin-right:" + Model.ImgMargin + "px}":"")

</style>
<div class="carousel @Model.ClassName" style="width:1000px;margin:auto;">
    <div class="container">
        <div class="slider-container">
            @Slider(Model, Model.ShowCount)
        </div>
        <div class="carousel-prev carousel-btn">
            <img src="~/image/index.V3/index_product_prev.png" />
        </div>
        <div class="carousel-next carousel-btn flipx">
            <img src="~/image/index.V3/index_product_prev.png" />
        </div>
    </div>
    @*@if (!string.IsNullOrEmpty(Model.PreviewHtml))
        {
            @Preview(Model, Model.PreviewHtml)
        }*@
    <script>
        var userAgent = navigator.userAgent.toLowerCase();
        // Figure out what browser is being used
        jQuery.browser = {
            version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
            safari: /webkit/.test(userAgent),
            opera: /opera/.test(userAgent),
            msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
            mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
        };
        var @(Model.ClassName)options = { imgWidth: @(Model.ImgWidth) , plugClassName: ".@Model.ClassName" };
        @(Model.ShowCount != 0? Model.ClassName+"options.showCount = " + Model.ShowCount+";":"")
        @(Model.ImgHeight != 0? Model.ClassName + "options.imgHeight = " + Model.ImgHeight+";":"")
        @(Model.ImgMargin != 0? Model.ClassName + "options.imgMargin = " + Model.ImgMargin+";":"")
        @(Model.ContainerWidth != 0? Model.ClassName + "options.containerWidth = " + Model.ContainerWidth + ";":"")
        if ($.browser.msie) {
            $(function () {
                $(".carousel.@Model.ClassName").Carousel(@(Model.ClassName)options);
            })
        } else {
                    $(".carousel.@Model.ClassName").Carousel(@(Model.ClassName)options);
        }
    </script>
</div>
@helper Slider(List<_21Education.DATA.CarouselBase> list, int showCount = 1)
    {

        for (int i = 0; i < list.Count; i++)
        {
            if (i == 0)
            {
                for (int j = list.Count - showCount; j < list.Count; j++)
                {
                    @Construct(list[j].ImgPath, list[j].Describe)
                }
            }
            @*

                @Construct(list[list.Count - 1].ImgPath, list[list.Count - 1].Describe)
            *@
            @Construct(list[i].ImgPath, list[i].Describe)



            if (i == list.Count - 1)
            {
                for (int j = 0; j < showCount; j++)
                {
                    @Construct(list[j].ImgPath, list[j].Describe)
                }
            }
        }


}

@helper Construct(string src, string describe)
    {
        <div class="slider-item">
            <img src="/Content/Upload/@src" />
            <span class="slider__caption">@describe</span>
        </div>
}

@*@helper Preview(List<Carousel> list, string html)
        {

            <div class="preview @Model.ClassName">
                @for (int i = 0; i < list.Count; i++)
                {
                    @Html.Raw(string.Format(html, list[i].ImgPath))
                }
            </div>
    }*@


